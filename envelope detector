import numpy as np
import matplotlib.pyplot as plt

# Sampling parameters
fs = 100000
t = np.linspace(0, 1, fs)

# AM signal parameters
a_c = 2
a_m = 2
myu = 0.5  # modulation index
f_c = 100   # carrier frequency
f_m = 5     # message frequency

# Generate signals
carrier = a_c * np.cos(2 * np.pi * f_c * t)
message = a_m * np.cos(2 * np.pi * f_m * t)
modulated = carrier * (1 + myu * message)

# Envelope detector (rectification + simple RC low-pass filter)
rectified = np.abs(modulated)

# Simple RC low-pass filter
RC = 1/(2*np.pi*f_c)  # cutoff around carrier freq
dt = 1/fs
alpha = dt / (RC + dt)
envelope = np.zeros_like(rectified)
for i in range(1, len(rectified)):
    envelope[i] = envelope[i-1] + alpha * (rectified[i] - envelope[i-1])

# Plotting
fig, axes = plt.subplots(3, 1, figsize=(10, 8))

axes[0].plot(t, modulated, color='blue', label="AM Signal")
axes[0].set_title("AM Signal")
axes[0].legend()
axes[0].grid(True)

axes[1].plot(t, rectified, color='orange', label="Rectified Signal")
axes[1].set_title("Rectified Signal")
axes[1].legend()
axes[1].grid(True)

axes[2].plot(t, envelope, color='green', label="Recovered Message (Envelope)")
axes[2].plot(t, (1 + myu * message), "--", color='red', alpha=0.6, label="Original Envelope")
axes[2].set_title("Envelope Detector Output")
axes[2].legend()
axes[2].grid(True)

plt.tight_layout()
plt.show()
